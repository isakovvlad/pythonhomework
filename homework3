class Matrix():
    
    def __init__(self, rows, cols, matrix = None):
        self.rows = rows
        self.cols = cols
        self.matrix = matrix or []

    def __add__(self, m):
        if (self.rows != m.rows or self.cols != m.cols):
            return 'Неверно задана размерность'
        res = Matrix(self.rows, self.cols)
        for i in range(self.rows):
            res.matrix.append(list(map(lambda x, y : x + y, self.matrix[i], m.matrix[i])))
        return res
     
    def __sub__(self, m):
        if (self.rows != m.rows or self.cols != m.cols):
            return 'Неверно задана размерность'
        res = Matrix(self.rows, self.cols)
        for i in range(self.rows):
            res.matrix.append(list(map(lambda x, y : x - y, self.matrix[i], m.matrix[i])))
        return res

    def __mul__(self, el):
        if isinstance(el, int):
            r = Matrix(self.rows, self.cols)
            for i in range(self.rows):
                r.matrix.append(list(map(lambda x : el * x, self.matrix[i])))
            return r
        elif isinstance(el, Matrix):
            if (self.cols != el.rows):
                return 'Неверно задана размерность'
            r = Matrix(self.rows, el.cols)
            for i in range(self.rows):
                mascp = []
                for j in range(el.cols):
                    c = 0
                    for k in range(self.cols):
                        c += (self.matrix[i][k] * el.matrix[k][j])
                    mascp.append(c)
                r.matrix.append(mascp)
            return r
        else:
            return 'Неверные данные'

    def transpose(self, matrix):
        return [list(i) for i in zip(*matrix)]

    def getTranspose(self):
        return self.transpose(self.matrix)
    
    @staticmethod
    def find(mat, r_s, c_s):
        for i in range(r_s, mat.rows):
            for j in range(c_s, mat.cols):
                if mat.matrix[i][j] != 0:
                    return i, j
        return -1 

    @staticmethod
    def kill(mat, r_p, c_p, c_s):
        if c_s != r_p:
            mat.matrix[c_s] = list(map(lambda x, y : x + y, mat.matrix[c_s], mat.matrix[r_p]))
        for i in range(c_s + 1, mat.rows):
            coef = -mat.matrix[i][c_p] / mat.matrix[r_p][c_p]
            mat.matrix[i] = list(map(lambda x , y : x + y * coef, mat.matrix[i], mat.matrix[r_p]))
    
    def gauss(self):
        col = 0
        for i in range(self.rows - 1):
            pivot = Matrix.find(self, i, col)
            if isinstance(pivot, int):
                break 
            Matrix.kill(self, pivot[0], pivot[1], i)

    def __str__(self):
        out = ''
        for i in range(self.rows):
            out += (str(self.matrix[i]))
        return out

m1 = Matrix(2, 2, [[1,2],[3,4]])
m2 = Matrix(2, 2, [[5,6],[7,8]])
m3 = Matrix(2, 4, [[1,2,3,4],[4,3,2,1]])
a = Matrix(3, 3, [[3, -2, 4],[3, 4, -2],[2, -1, -1]])
k = 3
print('m1 =', m1)
print('m2 =', m2)
print('m3 =', m3)
print('m1 + m2 =', m1 + m2)
print('m1 - m2 =', m1 - m2)
print('m1 * k =', m1 * k)
print('m1 * m3 =', m1 * m3)
print('m3.transpose() =', m3.getTranspose())
a.gauss()
print('a.gauss() =', a)
